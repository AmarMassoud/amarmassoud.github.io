generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Deal {
  id       String @id @default(cuid())
  sellerId String
  // seller   User   @relation(fields: [sellerId], references: [id])

  customerId String
  // customer   User   @relation(fields: [customerId], references: [id])

  cartItems Int
  items     Cartitem[]

  Purchase   Purchase? @relation(fields: [purchaseId], references: [id])
  purchaseId String?
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
}

model Cartitem {
  id            String         @id @default(cuid())
  productId     String
  product       Product        @relation(fields: [productId], references: [id])
  dealId        String
  deal          Deal           @relation(fields: [dealId], references: [id])
  quantity      Int
  customer      String // this is an id
  Refundrequest Refundrequest?
}

model Bank {
  id         String @id @default(cuid())
  cardExpire String
  cardNumber String
  cardType   String
  currency   String
  iban       String
  User       User?
}

model Refundrequest {
  id         String   @id @default(cuid())
  purchaseId String
  productId  String
  body       String
  reason     String
  cartItemId String   @unique
  cartItem   Cartitem @relation(fields: [cartItemId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  timeStamp  DateTime

  // totalPrice Float

  // product Product @relation(fields: [productId], references: [id])
}

model Purchase {
  id          String @id @default(cuid())
  deals       Deal[]
  total_price Float
  timeStamp   String
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  postId    String // todo what's a post
  productId String
  timestamp DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Product   Product  @relation(fields: [productId], references: [id])
}

model Address {
  id         String  @id @default(cuid())
  address    String
  city       String
  postalCode String
  state      String
  name       String
  // userId     String
  // User       User   @relation(fields: [userId], references: [id])
  User       User?   @relation(fields: [userId], references: [id])
  userId     String?
}

model Image {
  id        String  @id @default(cuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model User {
  id            String          @id @default(cuid())
  firstName     String
  lastName      String
  email         String
  password      String
  image         String
  bank          Bank?           @relation(fields: [bankId], references: [id])
  bankId        String          @unique
  role          String
  balance       Int             @default(0)
  addresses     Address[]
  Comment       Comment[]
  Product       Product[]
  Deal          Deal[]
  Refundrequest Refundrequest[]
}

model Product {
  id                 String     @id @default(cuid())
  title              String
  description        String
  price              Float // todo float
  discountPercentage Float
  rating             Float
  stock              Int
  brand              String
  category           String
  thumbnail          String
  seller             User       @relation(fields: [sellerId], references: [id])
  sellerId           String
  images             Image[]
  Cartitem           Cartitem[]
  Comment            Comment[]
}
